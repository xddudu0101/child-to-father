<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>多个子组件使用同一个回调的情况</title>
    <script src="library/react.js"></script>
    <script src="library/react-dom-0.14.0.js"></script>
    <script src="library/browser.min.js"></script>
    <script src="library/JSXTransformer.js"></script>
</head>

<body>
<div id="example"></div>
<script type="text/jsx">

    var MyContainer  = React.createClass({
        getInitialState: function () {
            return {
                totalChecked: 0,
                checked:false,

            };
        },
        onChildChanged: function (newState) {
            var newToral = this.state.totalChecked
                    + (newState ? 1 : -1);
            this.setState({
                totalChecked: newToral
            });
        },

        render: function () {
            var totalChecked = this.state.totalChecked;
            return (
                    <div>
                        <div>How many are checked: {totalChecked}</div>
                        <ToggleButton text="Toggle me"
                                      initialChecked={this.state.checked}
                                      callbackParent={this.onChildChanged}
                                />
                        <ToggleButton text="Toggle me too"
                                      initialChecked={this.state.checked}
                                      callbackParent={this.onChildChanged}
                                />
                        <ToggleButton text="And me"
                                      initialChecked={this.state.checked}
                                      callbackParent={this.onChildChanged}
                                />
                    </div>
            );
        }
    })

    // 子组件
    var ToggleButton=React.createClass({
        getInitialState: function () {
            return {
                checked: this.props.initialChecked
            };
        },
        onTextChange: function () {
            var newState = !this.state.checked;
            this.setState({
                checked: newState
            });
            // 这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值
            this.props.callbackParent(newState);
        },
        render: function () {
            // 从【父组件】获取的值
            var text = this.props.text;
            // 组件自身的状态数据
            var checked = this.state.checked;

            return (
                    <label>{text}: <input type="checkbox"
                                          checked={checked} onChange={this.onTextChange} /></label>
            );
        }


    })

    ReactDOM.render(
            <MyContainer  />, document.getElementById('example')
    );

</script>
</body>
</html>
